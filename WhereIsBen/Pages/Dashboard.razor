@page "/"
@using WhereIsBen.Data
@using GraphQL
@using System.Runtime.InteropServices
@using System.Transactions
@using GraphQL.Utilities.Federation

@inject ISnackbar Snackbar
@inject LocationService Location;

 @if (_location == null)
{
    <MudText Typo="Typo.h3">Loading...</MudText>
}
 else
 {
     <MudContainer MaxWidth="MaxWidth.Large">
         <MudGrid>
             <MudItem Class="d-flex align-center justify-center" xs="12">
                 <MudText Typo="Typo.h3"> Current Status: @_location</MudText>
             </MudItem>
             <MudGrid Class="mt-4">
                 <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full">
                    <MudButton Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Filled.Home" Color="Color.Secondary" Size="Size.Large" OnClick='(e) => ToggleLocation("Home")' Disabled=_isLoading>
                         Home
                        @if (_isLoading)
                        {
                            <MudProgressCircular Indeterminate=true Color="Color.Primary" Size="Size.Small" Class="ml-1"/>
                        }
                    </MudButton>
                    <MudButton Class="ma-2" Variant="Variant.Filled" StartIcon="@Icons.Filled.LocalPizza" Color="Color.Primary" Size="Size.Large" OnClick='(e) => ToggleLocation("Office")' Disabled=_isLoading>
                        Office
                        @if (_isLoading)
                        {
                            <MudProgressCircular Indeterminate=true Color="Color.Primary" Size="Size.Small" Class="ml-1"/>
                        }
                    </MudButton>
                 </MudItem>
             </MudGrid>
         </MudGrid>
     </MudContainer>
 }

@code
{
    private bool _isLoading;
    private string? _location;
    private int _id;
    private GraphQLResponse<LocationData>? _locations;

    protected override async Task OnInitializedAsync()
    {
        await GetLocations();
    }

    private async Task GetLocations()
    {
        _locations = await Location.GetLocation();

        _location = _locations?.Data.locations.FirstOrDefault()?.location;
        _id = _locations!.Data.locations.FirstOrDefault()!.Id;
    }

    private async Task<GraphQLResponse<Location>> UpdateLocation(string location)
    {
        return await Location.Updatelocation(_id, location);
    }

    private async Task ToggleLocation(string location)
    {
        _isLoading = true;
        GraphQLResponse<Location> updatedLocation = await UpdateLocation(location);

        if (updatedLocation.Errors == null)
        {
            await GetLocations();

            if (_location == "Office")
            {
                Snackbar.Add("Shocker \U0001F64C", Severity.Success);
            }
            else
            {
                Snackbar.Add("Are you sure? \U0001F632", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Something went wrong...", Severity.Error);
        }

        _isLoading = false;
    }
}
